--- JavaScriptCore/jit/ExecutableAllocator.h	2010-05-07 16:09:08.000000000 +0200
+++ JavaScriptCore/jit/ExecutableAllocator.h	2010-05-17 22:33:16.000000000 +0200
@@ -285,7 +285,7 @@
 inline ExecutablePool::ExecutablePool(size_t n)
 {
     size_t allocSize = roundUpAllocationSize(n, JIT_ALLOCATOR_PAGE_SIZE);
-    Allocation mem = systemAlloc(allocSize);
+    const Allocation mem = systemAlloc(allocSize);
     m_pools.append(mem);
     m_freePtr = mem.pages;
     if (!m_freePtr)
--- JavaScriptCore/runtime/Collector.cpp	(revision 63307)
+++ JavaScriptCore/runtime/Collector.cpp	(working copy)
@@ -91,6 +91,13 @@
 
 #define COLLECT_ON_EVERY_ALLOCATION 0
 
+#if COMPILER(MINGW64)
+extern "C" {
+void * __mingw_aligned_malloc (size_t, size_t);
+void __mingw_aligned_free (void *);
+}
+#endif
+
 using std::max;
 
 namespace JSC {
@@ -201,7 +208,7 @@
 #elif OS(WINCE)
     void* address = VirtualAlloc(NULL, BLOCK_SIZE, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
 #elif OS(WINDOWS)
-#if COMPILER(MINGW) && !COMPILER(MINGW64)
+#if COMPILER(MINGW)
     void* address = __mingw_aligned_malloc(BLOCK_SIZE, BLOCK_SIZE);
 #else
     void* address = _aligned_malloc(BLOCK_SIZE, BLOCK_SIZE);
@@ -292,7 +299,7 @@
 #elif OS(WINCE)
     VirtualFree(block, 0, MEM_RELEASE);
 #elif OS(WINDOWS)
-#if COMPILER(MINGW) && !COMPILER(MINGW64)
+#if COMPILER(MINGW)
     __mingw_aligned_free(block);
 #else
     _aligned_free(block);
--- JavaScriptCore/wtf/TCSpinLock.h	2010-03-19 16:20:53.000000000 +0100
+++ JavaScriptCore/wtf/TCSpinLock.h	2010-05-17 22:33:16.000000000 +0200
@@ -37,8 +37,6 @@
 
 #include <time.h>       /* For nanosleep() */
 
-#include <sched.h>      /* For sched_yield() */
-
 #if HAVE(STDINT_H)
 #include <stdint.h>
 #elif HAVE(INTTYPES_H)
@@ -134,7 +132,7 @@
 #define SPINLOCK_INITIALIZER { 0 }
 
 static void TCMalloc_SlowLock(volatile unsigned int* lockword) {
-  sched_yield();        // Yield immediately since fast path failed
+  Sleep(0);        // Yield immediately since fast path failed
   while (true) {
     int r;
 #if COMPILER(GCC)
--- JavaScriptCore/wtf/unicode/glib/UnicodeGLib.cpp	2010-03-19 16:20:53.000000000 +0100
+++ JavaScriptCore/wtf/unicode/glib/UnicodeGLib.cpp	2010-05-17 22:33:16.000000000 +0200
@@ -49,7 +49,7 @@
     GOwnPtr<GError> gerror;
 
     GOwnPtr<char> utf8src;
-    utf8src.set(g_utf16_to_utf8(src, srcLength, 0, 0, &gerror.outPtr()));
+    utf8src.set(g_utf16_to_utf8(reinterpret_cast<const gunichar2*>(src), srcLength, 0, 0, &gerror.outPtr()));
     if (gerror) {
         *error = true;
         return -1;
@@ -60,7 +60,7 @@
 
     long utf16resultLength = -1;
     GOwnPtr<UChar> utf16result;
-    utf16result.set(g_utf8_to_utf16(utf8result.get(), -1, 0, &utf16resultLength, &gerror.outPtr()));
+    utf16result.set(reinterpret_cast<UChar*>(g_utf8_to_utf16(utf8result.get(), -1, 0, &utf16resultLength, &gerror.outPtr())));
     if (gerror) {
         *error = true;
         return -1;
@@ -81,7 +81,7 @@
     GOwnPtr<GError> gerror;
 
     GOwnPtr<char> utf8src;
-    utf8src.set(g_utf16_to_utf8(src, srcLength, 0, 0, &gerror.outPtr()));
+    utf8src.set(g_utf16_to_utf8(reinterpret_cast<const gunichar2*>(src), srcLength, 0, 0, &gerror.outPtr()));
     if (gerror) {
         *error = true;
         return -1;
@@ -92,7 +92,7 @@
 
     long utf16resultLength = -1;
     GOwnPtr<UChar> utf16result;
-    utf16result.set(g_utf8_to_utf16(utf8result.get(), -1, 0, &utf16resultLength, &gerror.outPtr()));
+    utf16result.set(reinterpret_cast<UChar*>(g_utf8_to_utf16(utf8result.get(), -1, 0, &utf16resultLength, &gerror.outPtr())));
     if (gerror) {
         *error = true;
         return -1;
@@ -113,7 +113,7 @@
     GOwnPtr<GError> gerror;
 
     GOwnPtr<char> utf8src;
-    utf8src.set(g_utf16_to_utf8(src, srcLength, 0, 0, &gerror.outPtr()));
+    utf8src.set(g_utf16_to_utf8(reinterpret_cast<const gunichar2*>(src), srcLength, 0, 0, &gerror.outPtr()));
     if (gerror) {
         *error = true;
         return -1;
@@ -124,7 +124,7 @@
 
     long utf16resultLength = -1;
     GOwnPtr<UChar> utf16result;
-    utf16result.set(g_utf8_to_utf16(utf8result.get(), -1, 0, &utf16resultLength, &gerror.outPtr()));
+    utf16result.set(reinterpret_cast<UChar*>(g_utf8_to_utf16(utf8result.get(), -1, 0, &utf16resultLength, &gerror.outPtr())));
     if (gerror) {
         *error = true;
         return -1;
@@ -189,8 +189,8 @@
     GOwnPtr<char> utf8a;
     GOwnPtr<char> utf8b;
 
-    utf8a.set(g_utf16_to_utf8(a, len, 0, 0, 0));
-    utf8b.set(g_utf16_to_utf8(b, len, 0, 0, 0));
+    utf8a.set(g_utf16_to_utf8(reinterpret_cast<const gunichar2*>(a), len, 0, 0, 0));
+    utf8b.set(g_utf16_to_utf8(reinterpret_cast<const gunichar2*>(b), len, 0, 0, 0));
 
     GOwnPtr<char> foldedA;
     GOwnPtr<char> foldedB;
--- JavaScriptCore/wtf/unicode/glib/UnicodeGLib.h	2010-03-19 16:20:53.000000000 +0100
+++ JavaScriptCore/wtf/unicode/glib/UnicodeGLib.h	2010-05-17 22:33:16.000000000 +0200
@@ -34,7 +34,12 @@
 #include <stdlib.h>
 #include <string.h>
 
-typedef uint16_t UChar;
+#if !defined(WIN32) && !defined(_WIN32) && !defined(__WINSCW__) \
+    && !(defined(__CC_ARM) || defined(__ARMCC__)) /* RVCT */
+    typedef unsigned short UChar;
+#else
+    typedef wchar_t UChar;
+#endif
 typedef int32_t UChar32;
 
 namespace WTF {
--- WebCore/bindings/js/ScriptObject.cpp	2010-05-07 16:09:09.000000000 +0200
+++ WebCore/bindings/js/ScriptObject.cpp	2010-05-17 22:33:16.000000000 +0200
@@ -136,6 +136,14 @@
     return handleException(m_scriptState);
 }
 
+bool ScriptObject::set(const char* name, unsigned long long value)
+{
+    JSLock lock(SilenceAssertionsOnly);
+    PutPropertySlot slot;
+    jsObject()->put(m_scriptState, Identifier(m_scriptState, name), jsNumber(m_scriptState, value), slot);
+    return handleException(m_scriptState);
+}
+
 bool ScriptObject::set(const char* name, bool value)
 {
     JSLock lock(SilenceAssertionsOnly);
--- WebCore/bindings/js/ScriptObject.h	2010-03-19 16:20:54.000000000 +0100
+++ WebCore/bindings/js/ScriptObject.h	2010-05-17 22:33:16.000000000 +0200
@@ -59,6 +59,7 @@
         bool set(const char* name, unsigned);
         bool set(const char* name, unsigned long);
         bool set(const char* name, bool);
+        bool set(const char* name, unsigned long long);
 
         static ScriptObject createNew(ScriptState*);
     
--- WebCore/dom/XMLTokenizerLibxml2.cpp	2010-05-07 16:09:09.000000000 +0200
+++ WebCore/dom/XMLTokenizerLibxml2.cpp	2010-05-17 22:33:16.000000000 +0200
@@ -908,7 +908,7 @@
     if (m_parserStopped)
         return;
 
-#if COMPILER(MSVC) || COMPILER(RVCT)
+#if OS(WINDOWS) || COMPILER(RVCT)
     char m[1024];
     vsnprintf(m, sizeof(m) - 1, message, args);
 #else
@@ -922,7 +922,7 @@
     else
         handleError(type, m, lineNumber(), columnNumber());
 
-#if !COMPILER(MSVC) && !COMPILER(RVCT)
+#if !OS(WINDOWS) && !COMPILER(RVCT)
     free(m);
 #endif
 }
--- WebCore/platform/FileSystem.h	2010-05-07 16:09:09.000000000 +0200
+++ WebCore/platform/FileSystem.h	2010-05-17 22:33:16.000000000 +0200
@@ -64,7 +64,7 @@
 class CString;
 
 // PlatformModule
-#if OS(WINDOWS)
+#if OS(WINDOWS) && !PLATFORM(GTK)
 typedef HMODULE PlatformModule;
 #elif PLATFORM(QT)
 #if defined(Q_WS_MAC)
@@ -107,7 +107,7 @@
 #if PLATFORM(QT)
 typedef QFile* PlatformFileHandle;
 const PlatformFileHandle invalidPlatformFileHandle = 0;
-#elif OS(WINDOWS)
+#elif OS(WINDOWS) && !PLATFORM(GTK)
 typedef HANDLE PlatformFileHandle;
 // FIXME: -1 is INVALID_HANDLE_VALUE, defined in <winbase.h>. Chromium tries to
 // avoid using Windows headers in headers.  We'd rather move this into the .cpp.
@@ -142,7 +142,7 @@
 // Methods for dealing with loadable modules
 bool unloadModule(PlatformModule);
 
-#if PLATFORM(WIN)
+#if PLATFORM(WIN) && !PLATFORM(GTK)
 String localUserSpecificStorageDirectory();
 String roamingUserSpecificStorageDirectory();
 
--- WebCore/platform/gtk/GeolocationServiceGtk.cpp	2010-05-07 16:09:09.000000000 +0200
+++ WebCore/platform/gtk/GeolocationServiceGtk.cpp	2010-05-17 22:33:16.000000000 +0200
@@ -18,6 +18,11 @@
  */
 
 #include "config.h"
+
+#ifdef interface
+#undef interface
+#endif
+
 #include "GeolocationServiceGtk.h"
 
 #include "CString.h"
--- WebCore/platform/gtk/GeolocationServiceGtk.h	2010-03-19 16:20:54.000000000 +0100
+++ WebCore/platform/gtk/GeolocationServiceGtk.h	2010-05-17 22:33:16.000000000 +0200
@@ -25,6 +25,10 @@
 #include "PositionError.h"
 #include "RefPtr.h"
 
+#ifdef interface
+#undef interface
+#endif
+
 #include <geoclue/geoclue-master.h>
 #include <geoclue/geoclue-position.h>
 
--- WebCore/platform/KURL.cpp	2010-05-07 16:09:09.000000000 +0200
+++ WebCore/platform/KURL.cpp	2010-05-17 22:33:16.000000000 +0200
@@ -1425,7 +1425,7 @@
 #elif USE(GLIB_UNICODE)
     GOwnPtr<gchar> utf8Hostname;
     GOwnPtr<GError> utf8Err;
-    utf8Hostname.set(g_utf16_to_utf8(str, strLen, 0, 0, &utf8Err.outPtr()));
+    utf8Hostname.set(g_utf16_to_utf8(reinterpret_cast<const gunichar2*>(str), strLen, 0, 0, &utf8Err.outPtr()));
     if (utf8Err)
         return;
 
--- WebCore/platform/network/soup/ResourceHandleSoup.cpp	(revision 60658)
+++ WebCore/platform/network/soup/ResourceHandleSoup.cpp	(working copy)
@@ -856,7 +856,11 @@
         return;
     }
 
+#if OS(WINDOWS)
+    response.setMimeType(g_content_type_get_mime_type(g_file_info_get_content_type(info)));
+#else
     response.setMimeType(g_file_info_get_content_type(info));
+#endif
     response.setExpectedContentLength(g_file_info_get_size(info));
 
     GTimeVal tv;
--- WebCore/platform/text/gtk/TextBreakIteratorGtk.cpp	2010-03-19 16:20:54.000000000 +0100
+++ WebCore/platform/text/gtk/TextBreakIteratorGtk.cpp	2010-05-17 22:33:16.000000000 +0200
@@ -59,7 +59,7 @@
 
     long utf8len;
     GOwnPtr<char> utf8;
-    utf8.set(g_utf16_to_utf8(string, length, 0, &utf8len, 0));
+    utf8.set(g_utf16_to_utf8(reinterpret_cast<const gunichar2*>(string), length, 0, &utf8len, 0));
 
     // FIXME: assumes no surrogate pairs
 
--- WebCore/platform/text/TextEncoding.cpp	2010-05-07 16:09:09.000000000 +0200
+++ WebCore/platform/text/TextEncoding.cpp	2010-05-17 22:33:16.000000000 +0200
@@ -119,14 +119,14 @@
     return newTextCodec(*this)->encode(reinterpret_cast<const UChar *>(str.utf16()), str.length(), handling);
 #elif USE(GLIB_UNICODE)
     GOwnPtr<char> UTF8Source;
-    UTF8Source.set(g_utf16_to_utf8(characters, length, 0, 0, 0));
+    UTF8Source.set(g_utf16_to_utf8(reinterpret_cast<const gunichar2*>(characters), length, 0, 0, 0));
 
     GOwnPtr<char> UTF8Normalized;
     UTF8Normalized.set(g_utf8_normalize(UTF8Source.get(), -1, G_NORMALIZE_NFC));
 
     long UTF16Length;
     GOwnPtr<UChar> UTF16Normalized;
-    UTF16Normalized.set(g_utf8_to_utf16(UTF8Normalized.get(), -1, 0, &UTF16Length, 0));
+    UTF16Normalized.set(reinterpret_cast<UChar*>(g_utf8_to_utf16(UTF8Normalized.get(), -1, 0, &UTF16Length, 0)));
 
     return newTextCodec(*this)->encode(UTF16Normalized.get(), UTF16Length, handling);
 #elif OS(WINCE)
--- WebCore/plugins/gtk/PluginViewGtk.cpp	2010-05-07 16:09:09.000000000 +0200
+++ WebCore/plugins/gtk/PluginViewGtk.cpp	2010-05-17 22:33:16.000000000 +0200
@@ -45,6 +45,7 @@
 #include "Image.h"
 #include "KeyboardEvent.h"
 #include "MouseEvent.h"
+#include "NotImplemented.h"
 #include "Page.h"
 #include "PlatformKeyboardEvent.h"
 #include "PlatformMouseEvent.h"
@@ -71,7 +72,7 @@
 #include <cairo/cairo-xlib.h>
 #include <gdk/gdkx.h>
 #elif defined(GDK_WINDOWING_WIN32)
-#include "PluginMessageThrottlerWin.h"
+#include "win/PluginMessageThrottlerWin.h"
 #include <gdk/gdkwin32.h>
 #endif
 
@@ -706,6 +707,7 @@
         gtk_widget_queue_draw(m_parentFrame->view()->hostWindow()->platformPageClient());
 }
 
+#ifndef GDK_WINDOWING_WIN32
 static Display* getPluginDisplay()
 {
     // The plugin toolkit might have a different X connection open.  Since we're
@@ -719,6 +721,7 @@
     return 0;
 #endif
 }
+#endif
 
 #if defined(XP_UNIX)
 static void getVisualAndColormap(int depth, Visual** visual, Colormap* colormap)
@@ -788,15 +791,16 @@
         PluginView::setCurrentPluginView(this);
         JSC::JSLock::DropAllLocks dropAllLocks(JSC::SilenceAssertionsOnly);
         setCallingPlugin(true);
+#if defined(XP_UNIX)
         m_plugin->pluginFuncs()->getvalue(m_instance, NPPVpluginNeedsXEmbed, &m_needsXEmbed);
+#endif
         setCallingPlugin(false);
         PluginView::setCurrentPluginView(0);
     }
 
     if (m_isWindowed) {
-#if defined(XP_UNIX)
         GtkWidget* pageClient = m_parentFrame->view()->hostWindow()->platformPageClient();
-
+#if defined(XP_UNIX)
         if (m_needsXEmbed) {
             // If our parent is not anchored the startup process will
             // fail miserably for XEmbed plugins a bit later on when
@@ -817,7 +821,9 @@
 #endif
     } else {
         setPlatformWidget(0);
+#if defined(XP_UNIX)
         m_pluginDisplay = getPluginDisplay();
+#endif
     }
 
     show();
--- WebCore/plugins/PluginView.cpp	2010-05-07 16:09:09.000000000 +0200
+++ WebCore/plugins/PluginView.cpp	2010-05-17 22:33:16.000000000 +0200
@@ -68,7 +68,7 @@
 #include <wtf/ASCIICType.h>
 
 #if OS(WINDOWS) && ENABLE(NETSCAPE_PLUGIN_API)
-#include "PluginMessageThrottlerWin.h"
+#include "win/PluginMessageThrottlerWin.h"
 #endif
 
 using JSC::ExecState;
@@ -333,7 +333,7 @@
     JSC::JSLock::DropAllLocks dropAllLocks(JSC::SilenceAssertionsOnly);
 
 #if ENABLE(NETSCAPE_PLUGIN_API)
-#ifdef XP_WIN
+#if defined(XP_WIN) && !PLATFORM(GTK)
     // Unsubclass the window
     if (m_isWindowed) {
 #if OS(WINCE)
--- WebCore/plugins/PluginView.h	2010-05-07 16:09:09.000000000 +0200
+++ WebCore/plugins/PluginView.h	2010-05-17 22:33:16.000000000 +0200
@@ -313,7 +313,7 @@
         bool m_haveInitialized;
         bool m_isWaitingToStart;
 
-#if defined(XP_UNIX)
+#if defined(XP_UNIX) || PLATFORM(GTK)
         bool m_needsXEmbed;
 #endif
 
@@ -341,7 +341,7 @@
 
 private:
 
-#if defined(XP_UNIX) || OS(SYMBIAN)
+#if defined(XP_UNIX) || OS(SYMBIAN) || PLATFORM(GTK)
         void setNPWindowIfNeeded();
 #elif defined(XP_MACOSX)
         NP_CGContext m_npCgContext;
--- WebCore/plugins/win/PluginDatabaseWin.cpp	2010-03-19 16:20:54.000000000 +0100
+++ WebCore/plugins/win/PluginDatabaseWin.cpp	2010-05-17 22:33:16.000000000 +0200
@@ -34,7 +34,7 @@
 #include <windows.h>
 #include <shlwapi.h>
 
-#if COMPILER(MINGW)
+#if COMPILER(MINGW) && !COMPILER(MINGW64)
 #define _countof(x) (sizeof(x)/sizeof(x[0]))
 #endif
 
@@ -104,7 +104,7 @@
         DWORD pathStrSize = sizeof(pathStr);
         DWORD type;
 
-        result = SHGetValue(key, name, TEXT("Path"), &type, (LPBYTE)pathStr, &pathStrSize);
+        result = SHGetValueW(key, name, L"Path", &type, (LPBYTE)pathStr, &pathStrSize);
         if (result != ERROR_SUCCESS || type != REG_SZ)
             continue;
 
@@ -212,7 +212,7 @@
     HKEY key;
     LONG result;
     
-    result = RegOpenKeyEx(HKEY_LOCAL_MACHINE, TEXT("Software\\Mozilla"), 0, KEY_READ, &key);
+    result = RegOpenKeyExW(HKEY_LOCAL_MACHINE, L"Software\\Mozilla", 0, KEY_READ, &key);
     if (result == ERROR_SUCCESS) {
         WCHAR name[128];
         FILETIME lastModified;
@@ -229,7 +229,7 @@
             HKEY extensionsKey;
 
             // Try opening the key
-            result = RegOpenKeyEx(key, extensionsPath.charactersWithNullTermination(), 0, KEY_READ, &extensionsKey);
+            result = RegOpenKeyExW(key, extensionsPath.charactersWithNullTermination(), 0, KEY_READ, &extensionsKey);
 
             if (result == ERROR_SUCCESS) {
                 // Now get the plugins directory
@@ -237,7 +237,7 @@
                 DWORD pluginsDirectorySize = sizeof(pluginsDirectoryStr);
                 DWORD type;
 
-                result = RegQueryValueEx(extensionsKey, TEXT("Plugins"), 0, &type, (LPBYTE)&pluginsDirectoryStr, &pluginsDirectorySize);
+                result = RegQueryValueExW(extensionsKey, L"Plugins", 0, &type, (LPBYTE)&pluginsDirectoryStr, &pluginsDirectorySize);
 
                 if (result == ERROR_SUCCESS && type == REG_SZ)
                     directories.append(String(pluginsDirectoryStr, pluginsDirectorySize / sizeof(WCHAR) - 1));
@@ -255,7 +255,7 @@
 #if !OS(WINCE)
     // The new WMP Firefox plugin is installed in \PFiles\Plugins if it can't find any Firefox installs
     WCHAR pluginDirectoryStr[_MAX_PATH + 1];
-    DWORD pluginDirectorySize = ::ExpandEnvironmentStringsW(TEXT("%SYSTEMDRIVE%\\PFiles\\Plugins"), pluginDirectoryStr, _countof(pluginDirectoryStr));
+    DWORD pluginDirectorySize = ::ExpandEnvironmentStringsW(L"%SYSTEMDRIVE%\\PFiles\\Plugins", pluginDirectoryStr, _countof(pluginDirectoryStr));
 
     if (pluginDirectorySize > 0 && pluginDirectorySize <= _countof(pluginDirectoryStr))
         directories.append(String(pluginDirectoryStr, pluginDirectorySize - 1));
@@ -265,7 +265,7 @@
     WCHAR installationDirectoryStr[_MAX_PATH];
     DWORD installationDirectorySize = sizeof(installationDirectoryStr);
 
-    HRESULT result = SHGetValue(HKEY_LOCAL_MACHINE, TEXT("Software\\Microsoft\\MediaPlayer"), TEXT("Installation Directory"), &type, (LPBYTE)&installationDirectoryStr, &installationDirectorySize);
+    HRESULT result = SHGetValueW(HKEY_LOCAL_MACHINE, L"Software\\Microsoft\\MediaPlayer", L"Installation Directory", &type, (LPBYTE)&installationDirectoryStr, &installationDirectorySize);
 
     if (result == ERROR_SUCCESS && type == REG_SZ)
         directories.append(String(installationDirectoryStr, installationDirectorySize / sizeof(WCHAR) - 1));
@@ -277,7 +277,7 @@
     WCHAR installationDirectoryStr[_MAX_PATH];
     DWORD installationDirectorySize = sizeof(installationDirectoryStr);
 
-    HRESULT result = SHGetValue(HKEY_LOCAL_MACHINE, TEXT("Software\\Apple Computer, Inc.\\QuickTime"), TEXT("InstallDir"), &type, (LPBYTE)&installationDirectoryStr, &installationDirectorySize);
+    HRESULT result = SHGetValueW(HKEY_LOCAL_MACHINE, L"Software\\Apple Computer, Inc.\\QuickTime", L"InstallDir", &type, (LPBYTE)&installationDirectoryStr, &installationDirectorySize);
 
     if (result == ERROR_SUCCESS && type == REG_SZ) {
         String pluginDir = String(installationDirectoryStr, installationDirectorySize / sizeof(WCHAR) - 1) + "\\plugins";
@@ -288,7 +288,7 @@
 static inline void addAdobeAcrobatPluginDirectory(Vector<String>& directories)
 {
     HKEY key;
-    HRESULT result = RegOpenKeyEx(HKEY_LOCAL_MACHINE, TEXT("Software\\Adobe\\Acrobat Reader"), 0, KEY_READ, &key);
+    HRESULT result = RegOpenKeyExW(HKEY_LOCAL_MACHINE, L"Software\\Adobe\\Acrobat Reader", 0, KEY_READ, &key);
     if (result != ERROR_SUCCESS)
         return;
 
@@ -319,7 +319,7 @@
         DWORD acrobatInstallPathSize = sizeof(acrobatInstallPathStr);
 
         String acrobatPluginKeyPath = "Software\\Adobe\\Acrobat Reader\\" + latestAcrobatVersionString + "\\InstallPath";
-        result = SHGetValue(HKEY_LOCAL_MACHINE, acrobatPluginKeyPath.charactersWithNullTermination(), 0, &type, (LPBYTE)acrobatInstallPathStr, &acrobatInstallPathSize);
+        result = SHGetValueW(HKEY_LOCAL_MACHINE, acrobatPluginKeyPath.charactersWithNullTermination(), 0, &type, (LPBYTE)acrobatInstallPathStr, &acrobatInstallPathSize);
 
         if (result == ERROR_SUCCESS) {
             String acrobatPluginDirectory = String(acrobatInstallPathStr, acrobatInstallPathSize / sizeof(WCHAR) - 1) + "\\browser";
@@ -339,12 +339,12 @@
     if (!cachedPluginDirectory) {
         cachedPluginDirectory = true;
 
-        int moduleFileNameLen = GetModuleFileName(0, moduleFileNameStr, _MAX_PATH);
+        int moduleFileNameLen = GetModuleFileNameW(0, moduleFileNameStr, _MAX_PATH);
 
         if (!moduleFileNameLen || moduleFileNameLen == _MAX_PATH)
             goto exit;
 
-        if (!PathRemoveFileSpec(moduleFileNameStr))
+        if (!PathRemoveFileSpecW(moduleFileNameStr))
             goto exit;
 
         pluginsDirectory = String(moduleFileNameStr) + "\\Plugins";
@@ -358,15 +358,15 @@
 #if !OS(WINCE)
     WCHAR systemDirectoryStr[MAX_PATH];
 
-    if (GetSystemDirectory(systemDirectoryStr, _countof(systemDirectoryStr)) == 0)
+    if (GetSystemDirectoryW(systemDirectoryStr, _countof(systemDirectoryStr)) == 0)
         return;
 
     WCHAR macromediaDirectoryStr[MAX_PATH];
 
-    PathCombine(macromediaDirectoryStr, systemDirectoryStr, TEXT("macromed\\Flash"));
+    PathCombineW(macromediaDirectoryStr, systemDirectoryStr, L"macromed\\Flash");
     directories.append(macromediaDirectoryStr);
 
-    PathCombine(macromediaDirectoryStr, systemDirectoryStr, TEXT("macromed\\Shockwave 10"));
+    PathCombineW(macromediaDirectoryStr, systemDirectoryStr, L"macromed\\Shockwave 10");
     directories.append(macromediaDirectoryStr);
 #endif
 }
--- WebKit/gtk/WebCoreSupport/EditorClientGtk.cpp	2010-05-07 16:09:09.000000000 +0200
+++ WebKit/gtk/WebCoreSupport/EditorClientGtk.cpp	2010-05-17 22:33:16.000000000 +0200
@@ -660,7 +660,7 @@
     if (!dicts)
         return;
 
-    gchar* ctext = g_utf16_to_utf8(const_cast<gunichar2*>(text), length, 0, 0, 0);
+    gchar* ctext = g_utf16_to_utf8(const_cast<gunichar2*>(reinterpret_cast<const gunichar2*>(text)), length, 0, 0, 0);
     int utflen = g_utf8_strlen(ctext, -1);
 
     PangoLanguage* language = pango_language_get_default();
--- WebCore/platform/Arena.h	2010-05-18 18:02:56.000000000 +0200
+++ WebCore/platform/Arena.h	2010-05-18 18:03:33.000000000 +0200
@@ -44,7 +44,7 @@
 
 namespace WebCore {
 
-typedef unsigned long uword;
+typedef uintptr_t uword;
 
 struct Arena {
     Arena* next;        // next arena
--- WebCore/platform/text/TextStream.cpp	2010-05-07 16:09:09.000000000 +0200
+++ WebCore/platform/text/TextStream.cpp	2010-05-18 23:12:39.000000000 +0200
@@ -90,7 +90,7 @@
     return *this;
 }
 
-TextStream& TextStream::operator<<(void* p)
+TextStream& TextStream::operator<<(const void* p)
 {
     char buffer[printBufferSize];
     snprintf(buffer, sizeof(buffer) - 1, "%p", p);
@@ -108,7 +108,7 @@
     return String::adopt(m_text);
 }
 
-#if OS(WINDOWS) && PLATFORM(X86_64) && COMPILER(MSVC)
+#if OS(WINDOWS) && CPU(X86_64)
 TextStream& TextStream::operator<<(__int64 i)
 {
     char buffer[printBufferSize];
--- WebCore/platform/text/TextStream.h	2010-05-07 16:09:09.000000000 +0200
+++ WebCore/platform/text/TextStream.h	2010-05-18 23:12:39.000000000 +0200
@@ -43,9 +43,9 @@
     TextStream& operator<<(float);
     TextStream& operator<<(double);
     TextStream& operator<<(const char*);
-    TextStream& operator<<(void*);
+    TextStream& operator<<(const void*);
     TextStream& operator<<(const String&);
-#if OS(WINDOWS) && PLATFORM(X86_64) && COMPILER(MSVC)
+#if OS(WINDOWS) && CPU(X86_64)
     TextStream& operator<<(unsigned __int64);
     TextStream& operator<<(__int64);
 #endif
