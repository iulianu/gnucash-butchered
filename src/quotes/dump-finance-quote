#!/usr/bin/perl
#
#    Copyright (C) 2003, David Hampton <hampton@employees.org>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
#    02111-1307, USA
#

use strict;

sub check_modules {
  my @modules = qw(Date::Manip Finance::Quote LWP HTML::TableExtract);
  my @missing;

  foreach my $mod (@modules) {
    if (eval "require $mod") {
      $mod->import();
    }
    else {
      push (@missing, $mod);
    }
  }

  return unless @missing;

  print STDERR "$0 cannot find all the Perl modules needed to run.\n";
  print STDERR "You need to install the following Perl modules:\n";
  foreach my $mod (@missing) {
    print STDERR "  ".$mod."\n";
  }
  print STDERR "Run 'update-finance-quote' as root to install them.\n";

  exit 1;
}

sub report {
  my($itemname, $qh, $verbose) = @_;
  my ($symbol, $date, $currency, $last, $nav, $price, $timezone, $keyname);
  my($success);

  # Parse the quote fields and put warnings where necessary.
  $success = 1;
  if (defined($$qh{$itemname, "symbol"})) {
    $symbol = $$qh{$itemname, "symbol"};
  } else {
    $symbol = "$itemname (deduced)";
    $success = 0;
  }
  if (defined($$qh{$itemname, "date"})) {
    $date = $$qh{$itemname, "date"};
  } else {
    $date = "** missing **";
    $success = 0;
  }
  if (defined($$qh{$itemname, "currency"})) {
    $currency = $$qh{$itemname, "currency"};
  } else {
    $currency = "** missing **";
    $success = 0;
  }
  if ((!defined($$qh{$itemname, "last"})) &&
      (!defined($$qh{$itemname, "nav" })) &&
      (!defined($$qh{$itemname, "price"}))) {
    $$qh{$itemname, "last"} = "**missing**";
    $$qh{$itemname, "nav"} = "**missing**";
    $$qh{$itemname, "price"} = "**missing**";
    $success = 0;
  } else {
    $last = defined($$qh{$itemname, "last"})
      ? $$qh{$itemname, "last"} :  "";
    $nav = defined($$qh{$itemname, "nav"})
      ? $$qh{$itemname, "nav"} :  "";
    $price = defined($$qh{$itemname, "price"})
      ? $$qh{$itemname, "price"} :  "";
  }
  $timezone = defined($$qh{$itemname, "timezone"})
    ? $$qh{$itemname, "timezone"} :  "";

  # Report failure
  if ($success == 0) {
    my ($stock, $key, %seen);
    printf("\nThe query for $itemname failed!!");
    foreach $keyname (sort keys %$qh) {
      ($stock, $key) = split('\034', $keyname);
      next if $stock eq $itemname;
      next if $seen{$stock} == 1;
      $seen{$stock} = 1;
      printf "  Found data for stock(s) %s instead.\n", join(", ",  keys(%seen));
    }
    printf "\n";
  }

  # Dump gnucash recognized fields
  printf "Finance::Quote fields Gnucash uses:\n";
  printf "    symbol: %-20s <=== required\n",	  $symbol;
  printf "      date: %-20s <=== required\n",  	  $date;
  printf "  currency: %-20s <=== required\n", 	  $currency;
  printf "      last: %-20s <=\\       \n",    	  $last;
  printf "       nav: %-20s <=== one of these\n", $nav;
  printf "     price: %-20s <=/        \n", 	  $price;
  printf "  timezone: %-20s <=== optional\n", 	  $timezone;

  # Dump all fields if requested
  if ($verbose) {
    printf "\nAll fields returned by Finance::Quote for stock $itemname\n\n";
    printf "%-10s %10s  %s\n", "stock", "field", "value";
    printf "%-10s %10s  %s\n", "-----", "-----", "-----";
    foreach $keyname (sort keys %$qh) {
      my ($stock, $key) = split('\034', $keyname);
      printf "%-10s %10s: %s\n", $stock, $key, $$qh{$stock, $key};
    }
    print "\n";
  }
}

# Check for and load non-standard modules
check_modules ();

my $q = Finance::Quote->new;
$q->timeout(60);

if ($#ARGV < 1) {
  my @sources = $q->sources();
  printf "\nUsage: $0 <quote-source> [-v] <stock> [<stock> ...]\n\n";
  printf "Available sources are: \n     %s\n\n", join(' ', @sources);
  exit 0;
}

my $verbose = 0;
if (@ARGV[0] eq "-v") {
  $verbose = 1;
  shift;
}

my $exchange = shift;
while ($#ARGV >= 0) {
  my $stock = shift;
  my %quotes = $q->fetch($exchange, $stock);
  $stock =~ tr/a-z/A-Z/;
  report($stock, \%quotes, $verbose);
  if ($#ARGV >= 0) {
    printf "=====\n\n";
  }
}

=head1 NAME

dump-finance-quote	- Print out data from the F::Q module

=head1 SYNOPSIS

    dump-finance-quote yahoo CSCO JNPR
    dump-finance-quote yahoo BAESY.PK
    dump-finance-quote europe 48406.PA 13000.PA
    dump-finance-quote vwd 632034
    dump-finance-quote ftportfolios FKYGTX

=head1 DESCRIPTION

This program obtains information from Finance::Quote about any
specified stock, and then dumps it to the screen in annotated form.
This will allow someone to see what is returned, and whether it
provides all the information needed by Gnucash.

=cut
