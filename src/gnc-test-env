#!/bin/sh
exec guile -s $0 "$@"
!#

;; Spit out the environment variable settings needed based on
;; arguments listing gnc-module-dirs, guile-load-dirs, and
;; library-dirs

(use-modules (srfi srfi-13) (srfi srfi-14)) ;; for string-tokenize
(debug-enable 'backtrace)
(debug-enable 'debug)
(read-enable 'positions)

;; Are we on MS Windows here? If yes, make this a #t.
;; (utsname:sysname (uname)) wasn't available in my guile-1.6.7 on
;; mingw, so I don't know an automated way to do this so far.
(define is-windows? #f)

(define args (cdr (command-line)))
(define display-exports? #t)

(define gnc-module-dirs '())
(define guile-load-dirs '())
(define library-dirs '())

(define (usage-death)
  (display "Usage: gnc-test-env [ --no-exports ]\n")
  (display "                    [ (--gnc-module-dir dir | \n")
  (display "                       --guile-load-dir dir | \n")
  (display "                       --library-dir dir) ... ]\n")
  (exit 1))

(define (process-args! args)
  (let loop ((rest args))
    (cond
     ((null? rest) #t)
     ((string=? "--gnc-module-dir" (car rest))
      (set! gnc-module-dirs (cons (cadr rest) gnc-module-dirs))
      (loop (cddr rest)))
     ((string=? "--guile-load-dir" (car rest))
      (set! guile-load-dirs (cons (cadr rest) guile-load-dirs))
      (loop (cddr rest)))
     ((string=? "--library-dir" (car rest))
      (set! library-dirs (cons (cadr rest) library-dirs))
      (loop (cddr rest)))
     (else (usage-death))))
  (set! gnc-module-dirs (reverse gnc-module-dirs))
  (set! guile-load-dirs (reverse guile-load-dirs))
  (set! library-dirs (reverse library-dirs)))

;; The character set of everything except a directory separator as
;; necessary for string-tokenize below
(define char-set-path
  (char-set-adjoin 
   (char-set-delete char-set:graphic #\/)
   #\ ))

;; The directory separator string.
(define dir-separator-string
  (if is-windows?
      "\\\\" ;; Needs to be quoted twice because of additional shell quoting
      "/"))

;; The path separator string; only needed for GUILE_LOAD_PATH
(define path-sep-str
  (if is-windows?
      ";"
      ":"))

;; Adapt the directory separator character in the given PATH and
;; return the result.
(define (adapt-dirsep path)
  (string-join
   (string-tokenize path char-set-path)
   dir-separator-string))

(if (and (not (null? args))
         (string=? "--no-exports" (car args)))
    (begin
      (set! display-exports? #f)
      (set! args (cdr args))))

(if (null? args) (exit 0))

(process-args! args)

(display "GNC_MODULE_PATH=${GNC_MODULE_PATH}:")
(display (adapt-dirsep
	  (string-join gnc-module-dirs
		       ":")))

(display " GUILE_LOAD_PATH=\"${GUILE_LOAD_PATH}")
(display path-sep-str)
(display (adapt-dirsep
	  (string-join (append gnc-module-dirs guile-load-dirs)
		       path-sep-str)))
(display "\"")

(display " LD_LIBRARY_PATH=${LD_LIBRARY_PATH}")
(display (adapt-dirsep
	  (apply string-append
		 (map
		  (lambda (dir)
		    (string-append ":" dir ":" dir "/.libs"))
		  (append gnc-module-dirs library-dirs)))))

(display " DYLD_LIBRARY_PATH=${DYLD_LIBRARY_PATH}")
(display (adapt-dirsep
	  (apply string-append
		 (map
		  (lambda (dir)
		    (string-append ":" dir ":" dir "/.libs"))
		  (append gnc-module-dirs library-dirs)))))

(display " LTDL_LIBRARY_PATH=${LTDL_LIBRARY_PATH}")
(display (apply string-append
                (map
                 (lambda (dir)
                   (string-append ":" dir ":" dir "/.libs"))
                 (append gnc-module-dirs library-dirs))))

(if is-windows?
    (begin
      (display " PATH=${PATH}")
      (display (apply string-append
		      (map
		       (lambda (dir)
			 (string-append ":" dir ":" dir "/.libs"))
		       (append gnc-module-dirs library-dirs))))))

(if display-exports?
    (begin
      (display "; ")
      (display " export GNC_MODULE_PATH;")
      (display " export GUILE_LOAD_PATH;")
      (display " export LD_LIBRARY_PATH;")
      (display " export DYLD_LIBRARY_PATH;")
      (display " export LTDL_LIBRARY_PATH;")))

;; Local Variables:
;; mode: scheme
;; End:
