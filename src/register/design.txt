The Register Object
-------------------
The register is an infrastructure for building 
a modular spread-sheet/matrix/array of cells,
where each cell may have a unique/special 
capability, e.g. to store only dates, amounts
or text.  The register has been designed to 
be easy to extend, modular & easy to maintain,
and memory-efficient.  It is intended to be used
for building financial apps and spread-sheets.

Features
--------
-- Supported cell types:
   Date:        display and/or edit of date, can 
                use accelerator keys to set date
   Price/Value: display and or edit of numeric quantity
   Text:        arbitrary text string display and/or edit
   Quickfill:   autocompletes user's typed in entry
                to match previous entries
   Combo:       pull-down menu of choices
   Recncell:    checkbox, click to cycle through values

-- Modular: cells/columns are thier own objects, 
            new cells & column types can be invented.
-- Easily configurable: layout of cells is programmatically 
                        modifiable.
-- Tabbing order between cells is customizable
-- No assumptions made about source of data, no
   predifined financial structure required or enforced.
-- Motif & C based
-- GUI code segregated, theorectially making port to 
   Qt, GTK easy.


Philosphy
---------
The register object, indeed, all code in this directory, does not
depend on (should not depend on) any code in the accounting engine,
or on any code in the main application.  It should be possible to use 
the register in a stand-alone fashion.   I beleive that this
independance is almost true, there may still be some warts.  As a result
of this "independence" philosophy, ther is a very small amount of
duplicated code for date handling (i.e. there are similar functions
in src/register/datecell.c and src/engine/date.c).  As cleanup
continues, this duplication will disappear.


Design Overview
---------------
The register is built of several components:
the "cell", the "cellblock", the "cursor", the 
"table", and the "register".

The "cell" is an active cell object.  This object
defines callbacks that are called when the user
enters the cell (e.g. by clicking on a cell in a 
table), when the user attempts to modify text in the
cell (e.g. by typing in it), and when the user leaves 
the cell (e.g. by moving to a different cell).

Special-purpose cells can be created by "inheriting"
from the cell object.  Thus, there are special-purpose
cells for handling dates, pull-down menus, text fields,
monetary amounts, etc.

The "cellblock" is an array of active cells.  The
cells are layed out in row-column order.  The 
cellblock is mostly just a convenient container for
organizing active cells in an array.

The "table" is the displayed matrix.  The table is
a complex object; it is NOT merely a cellblock.
The table provides all of the GUI infrastructure for
displaying a row-column matrix of strings. 

The table provides one very important function
for minimizing memory usage for large matrixes.
It defines the notion of a "cursor".  The "cursor"
is a cellblock (an array of active cells) that is
moved to the location that the user is currently
editing.  The cursor "virtualizes" cell functions;
that is, it makes it seem to the user as if all
cells in the table are active, when in fact the only
cell that actually needs to be active is the one that 
the user is currently editing.  Note that the 
cursor "tiles" the table: when it is moved to the
active cell, it is moved in such a way so that
it is shifted an integer multiple of the cursor
width and height.


Portability Notes
-----------------
Note: neither the "cell", nor the "cellblock" contain
any Motif-specific code.  They should be portable to
other GUI's (e.g. GTK, QT).  

All Motif-specific code appears in the "table".

Apologies
---------
This is not the worlds most elegant design, its 
ocasioanly a bit of a hack, occasionally over-complex,
but it more or less works, and should be quite extensible.
Its certainly light-years ahead of its predecessor.

-- Linas Vepstas
-- Feb 1998



