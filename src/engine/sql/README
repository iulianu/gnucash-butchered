
This directory contains code for SQL/postgres support.  The
SQL backend can be used in several modes. The single-user modes
are more-or-less beta: they work, but haven't been well tested.
The multi-user code is experimental: it still has a variety of
problems.



Postgres Install Instructions
-----------------------------
1) Install postgresql server, client and devel packages.
2) if installed from redhat, then running /etc/rc.d/init.d/postgresql 
   will setup and initialize basic postgres first-time setup & config.
3) as root, su - postgres then run 'createuser' to add your user id
4) (don't set a password on your postgres db name, yet, gnucash doesn't 
    have a GUI to ask for your password yet)
5) as yourself (i.e. your unix login), run 'createdb gnucash'
   

GnuCash Build Instructions
--------------------------
Same as usual, but you want to specify the flag '--enable-sql' i.e. 
./configure --enable-sql
and then 'make'.



How To Use This Thing
---------------------
a) Open your favorite datafile in the usual fashion.
b) Click on 'Save As'
c) enter the following URL instead of a filename in the file picker:
    postgres://localhost/some-name-you-pick

The above steps will copy your data into that database.  You can 
then restart gnucash (or keep working) and type in the same URL
in the file open dialogs.  Or try it on the commandline:

/usr/local/bin/gnucash postgres://localhost/whatever

Note that you *must* use 'localhost' for your hostname, and 
not some other hostname.  This is because anything else requires
an sql username & password, and we don't have the gui dialogs for 
that yet.



To Be Done
----------
Core bugs/features that still need work:

-- allow user to enter URL in GUI dialog, get GUI to remember the URL 

-- Implement GUI to ask user for username/password to log onto the
   server. 

-- fix the annoying postgres:,,localhost,asdf file syntax: needs
   mods to gnc-book to keep it happy about lock files & such.
   (coord with rlb on gnc-book redesign)

-- review (actually, design & architect) the communications error
   handling policy.  For example, CopyToEngine() will leave
   the backend in a disabled state if a communication error occurs;
   there will be other debiliting conditions if the backend disappears,
   leaving the engine in a possibly confused state.

-- during sync, detect and report conflicting edits to accounts 
   and transactions.  See the notes for pgendSync() for details
   as to what this is about.  For the first pass, this is not a 
   serious issue; its a 'nice to have' thing.


To Be Done, Part II
-------------------
This list only affects the multi-user and advanced/optional features.

-- saving as single-user, then re-opening in multi-user mains missing
   checkpoints, and thus no balances.

-- checkpoint ending balance is showing up as starting balance

-- transaction rollbck is 'incorrect'; sort of ?? since we should
   roll back to what's in the db, and not the old stored transaction ...
   but the way the register works, it hides this problem ...

-- store account balances in database.  This will be tricky ...
   -- split query gets hard ... 
   -- use postgres aggregates ?? 

-- provide support for more query types in gncquery.c

-- implement account rollback (i.e. of other user has modified the
   account, we need to do something to merge thier work into ours...)

-- fix caching in the face of lost contact to the backend.  If the
   backend can't contact its server, then we should just save up caches,
   and then when contact with backend re-established, we should spit
   them out.  The pgendSync routine should more or less dothe trick;
   note, however, that the file format needs to save the version number
   ...

-- Implement logging history in the SQL server.  i.e. save the old
   copies of stuff in log tables.  Make the username part of the 
   logging scheme.

-- let all attached client receive update events via SQL LISTEN/NOTIFY 
   events.

-- Implement various advanced database features, such as checking the
   user's permission to view/edit account by account ... (hmmm this
   done by the dbadmin... using SQL commands... which means if user
   tries to write to something they're not allowed to write to,
   then they should be bounced back.

-- Review versioning verification in backend. The desired semantic for 
   updates should be like CVS: multiple nearly-simultaneous writers 
   are allowed; however, only one wins, and others are kicked back. 
   The losers know themselves because they are trying to update info 
   of the wrong version. 
   -- pgend_transaction_commit does it correctly; but the gui doesn't
      report a rollback.
   -- pgTransactionSync() is broken, but its not used anywher.
   -- pgend_account_commit checks version but doesn't rollback.
      (nor does the dui report a rollback.
   -- pgendSync does the right thing, except that it doesn't
      detect any version conflicts, nor does it notify the user
      of such conflicts.

   I'm not sure how critical this all is; with a small number of users
   it shouldn't be a problem.  With a huge number of users, each editing
   the same transaction (unlikely!?) then there is risk of clobbered
   data, but so what?  ersioning is at least partly a people-management
   problem.  Anyway, what's there now should be pretty good & should
   work for now.  Except its mostly untested.

-- review & match up against docs at 
   http://www.lupercalia.net/gnc-db/

-- use version numbers for commodities.  Right now, multi-user
   updates of commodities are not detected (this seem OK for
   now, since this is a rare occurrance, right ???)


