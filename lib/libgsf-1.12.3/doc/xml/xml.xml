<refentry id="gsf-XML-and-libxml">
<refmeta>
<refentrytitle>XML and libxml</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GSF Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>XML and libxml</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<anchor id="GsfXMLOut"/>
<synopsis>



#define     <link linkend="GSF-XML-IN-NS:CAPS">GSF_XML_IN_NS</link>                   (id, uri)
enum        <link linkend="GsfXMLContent">GsfXMLContent</link>;
            <link linkend="GsfXMLIn">GsfXMLIn</link>;
<link linkend="int">int</link>         <link linkend="gsf-xmlDocFormatDump">gsf_xmlDocFormatDump</link>            (<link linkend="GsfOutput">GsfOutput</link> *output,
                                             <link linkend="xmlDoc">xmlDoc</link> *cur,
                                             <link linkend="char">char</link> const *encoding,
                                             <link linkend="gboolean">gboolean</link> format);
<link linkend="void">void</link>        <link linkend="gsf-xml-in-doc-free">gsf_xml_in_doc_free</link>             (<link linkend="GsfXMLInDoc">GsfXMLInDoc</link> *doc);
            <link linkend="GsfXMLBlob">GsfXMLBlob</link>;
            <link linkend="GsfXMLOut-struct">GsfXMLOut</link>;
            <link linkend="GsfXMLInDoc">GsfXMLInDoc</link>;
            <link linkend="GsfXMLInNS">GsfXMLInNS</link>;
#define     <link linkend="GSF-XML-IN-NODE-FULL:CAPS">GSF_XML_IN_NODE_FULL</link>            (parent_id, id, ns, name, has_content, 	\
			     deprecated_unused_allow_unknown, check_ns, start, end, user)
#define     <link linkend="GSF-XML-IN-NODE:CAPS">GSF_XML_IN_NODE</link>                 (parent_id, id, ns, name, has_content, start, end)
            <link linkend="GsfXMLInNode">GsfXMLInNode</link>;
<link linkend="gboolean">gboolean</link>    (<link linkend="GsfXMLInUnknownFunc">*GsfXMLInUnknownFunc</link>)          (<link linkend="GsfXMLIn">GsfXMLIn</link> *state,
                                             <link linkend="xmlChar">xmlChar</link> const *elem,
                                             <link linkend="xmlChar">xmlChar</link> const **attrs);
<link linkend="xmlParserCtxt">xmlParserCtxt</link>* <link linkend="gsf-xml-parser-context">gsf_xml_parser_context</link>       (<link linkend="GsfInput">GsfInput</link> *input);
<link linkend="GsfXMLInDoc">GsfXMLInDoc</link>* <link linkend="gsf-xml-in-doc-new">gsf_xml_in_doc_new</link>             (<link linkend="GsfXMLInNode">GsfXMLInNode</link> *root,
                                             <link linkend="GsfXMLInNS">GsfXMLInNS</link> *ns);
<link linkend="gboolean">gboolean</link>    <link linkend="gsf-xml-in-namecmp">gsf_xml_in_namecmp</link>              (<link linkend="GsfXMLIn">GsfXMLIn</link> const *state,
                                             <link linkend="char">char</link> const *str,
                                             unsigned <link linkend="int">int</link> ns_id,
                                             <link linkend="char">char</link> const *name);
<link linkend="gboolean">gboolean</link>    <link linkend="gsf-xml-in-parse">gsf_xml_in_parse</link>                (<link linkend="GsfXMLIn">GsfXMLIn</link> *state,
                                             <link linkend="GsfInput">GsfInput</link> *input);
<link linkend="char">char</link>const * <link linkend="gsf-xml-in-check-ns">gsf_xml_in_check_ns</link>             (<link linkend="GsfXMLIn">GsfXMLIn</link> const *state,
                                             <link linkend="char">char</link> const *str,
                                             unsigned <link linkend="int">int</link> ns_id);
<link linkend="void">void</link>        <link linkend="gsf-xml-in-doc-extend">gsf_xml_in_doc_extend</link>           (<link linkend="GsfXMLInDoc">GsfXMLInDoc</link> *doc,
                                             <link linkend="GsfXMLInNode">GsfXMLInNode</link> *nodes);
<link linkend="void">void</link>        <link linkend="gsf-xml-in-doc-set-unknown-handler">gsf_xml_in_doc_set_unknown_handler</link>
                                            (<link linkend="GsfXMLInDoc">GsfXMLInDoc</link> *doc,
                                             <link linkend="GsfXMLInUnknownFunc">GsfXMLInUnknownFunc</link> handler);
<link linkend="GsfXMLOut">GsfXMLOut</link>*  <link linkend="gsf-xml-out-new">gsf_xml_out_new</link>                 (<link linkend="GsfOutput">GsfOutput</link> *output);
<link linkend="void">void</link>        <link linkend="gsf-xml-out-set-doc-type">gsf_xml_out_set_doc_type</link>        (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml,
                                             <link linkend="char">char</link> const *type);
<link linkend="void">void</link>        <link linkend="gsf-xml-out-start-element">gsf_xml_out_start_element</link>       (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml,
                                             <link linkend="char">char</link> const *id);
<link linkend="char">char</link>const * <link linkend="gsf-xml-out-end-element">gsf_xml_out_end_element</link>         (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml);
<link linkend="void">void</link>        <link linkend="gsf-xml-out-add-cstr">gsf_xml_out_add_cstr</link>            (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml,
                                             <link linkend="char">char</link> const *id,
                                             <link linkend="char">char</link> const *val_utf8);
<link linkend="void">void</link>        <link linkend="gsf-xml-out-add-cstr-unchecked">gsf_xml_out_add_cstr_unchecked</link>  (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml,
                                             <link linkend="char">char</link> const *id,
                                             <link linkend="char">char</link> const *val_utf8);
<link linkend="void">void</link>        <link linkend="gsf-xml-out-add-bool">gsf_xml_out_add_bool</link>            (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml,
                                             <link linkend="char">char</link> const *id,
                                             <link linkend="gboolean">gboolean</link> val);
<link linkend="void">void</link>        <link linkend="gsf-xml-out-add-int">gsf_xml_out_add_int</link>             (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml,
                                             <link linkend="char">char</link> const *id,
                                             <link linkend="int">int</link> val);
<link linkend="void">void</link>        <link linkend="gsf-xml-out-add-uint">gsf_xml_out_add_uint</link>            (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml,
                                             <link linkend="char">char</link> const *id,
                                             unsigned <link linkend="int">int</link> val);
<link linkend="void">void</link>        <link linkend="gsf-xml-out-add-float">gsf_xml_out_add_float</link>           (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml,
                                             <link linkend="char">char</link> const *id,
                                             <link linkend="double">double</link> val,
                                             <link linkend="int">int</link> precision);
<link linkend="void">void</link>        <link linkend="gsf-xml-out-add-enum">gsf_xml_out_add_enum</link>            (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml,
                                             <link linkend="char">char</link> const *id,
                                             <link linkend="GType">GType</link> etype,
                                             <link linkend="gint">gint</link> val);
<link linkend="void">void</link>        <link linkend="gsf-xml-out-add-color">gsf_xml_out_add_color</link>           (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml,
                                             <link linkend="char">char</link> const *id,
                                             unsigned <link linkend="int">int</link> r,
                                             unsigned <link linkend="int">int</link> g,
                                             unsigned <link linkend="int">int</link> b);
<link linkend="void">void</link>        <link linkend="gsf-xml-out-add-base64">gsf_xml_out_add_base64</link>          (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml,
                                             <link linkend="char">char</link> const *id,
                                             <link linkend="guint8">guint8</link> const *data,
                                             unsigned <link linkend="int">int</link> len);
<link linkend="void">void</link>        <link linkend="gsf-xml-out-simple-element">gsf_xml_out_simple_element</link>      (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml,
                                             <link linkend="char">char</link> const *id,
                                             <link linkend="char">char</link> const *content);
<link linkend="void">void</link>        <link linkend="gsf-xml-out-simple-float-element">gsf_xml_out_simple_float_element</link>
                                            (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml,
                                             <link linkend="char">char</link> const *id,
                                             <link linkend="double">double</link> val,
                                             <link linkend="int">int</link> precision);
<link linkend="void">void</link>        <link linkend="gsf-xml-out-simple-int-element">gsf_xml_out_simple_int_element</link>  (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml,
                                             <link linkend="char">char</link> const *id,
                                             <link linkend="int">int</link> val);

</synopsis>
</refsynopsisdiv>

<refsect1>
<title>Object Hierarchy</title>
<synopsis>

  <link linkend="GObject">GObject</link>
   +----GsfXMLOut
</synopsis>

</refsect1>








<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GSF-XML-IN-NS:CAPS"/>GSF_XML_IN_NS()</title>
<indexterm><primary>GSF_XML_IN_NS</primary></indexterm><programlisting>#define     GSF_XML_IN_NS(id, uri)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GsfXMLContent"/>enum GsfXMLContent</title>
<indexterm><primary>GsfXMLContent</primary></indexterm><programlisting>typedef enum {
	GSF_XML_NO_CONTENT,
	GSF_XML_CONTENT,
	GSF_XML_SHARED_CONTENT
} GsfXMLContent;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GsfXMLIn"/>GsfXMLIn</title>
<indexterm><primary>GsfXMLIn</primary></indexterm><programlisting>typedef struct {
	GsfXMLInDoc  const *doc;	/* init before parsing */

    /* look but do not change */
	GsfXMLInNode const *node;	/* current node */
	GSList	 	   *state_stack;

	GsfXMLInNS   const *default_ns;	/* optionally NULL */
	GSList	 	   *ns_stack;

	GString		*content;
	gint		 unknown_depth;	/* handle recursive unknown tags */
	GHashTable	*ns_prefixes;	/* current ns prefixes */
	GPtrArray	*ns_by_id;		/* indexed by id */
} GsfXMLIn;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gsf-xmlDocFormatDump"/>gsf_xmlDocFormatDump ()</title>
<indexterm><primary>gsf_xmlDocFormatDump</primary></indexterm><programlisting><link linkend="int">int</link>         gsf_xmlDocFormatDump            (<link linkend="GsfOutput">GsfOutput</link> *output,
                                             <link linkend="xmlDoc">xmlDoc</link> *cur,
                                             <link linkend="char">char</link> const *encoding,
                                             <link linkend="gboolean">gboolean</link> format);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>output</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cur</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>encoding</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-xml-in-doc-free"/>gsf_xml_in_doc_free ()</title>
<indexterm><primary>gsf_xml_in_doc_free</primary></indexterm><programlisting><link linkend="void">void</link>        gsf_xml_in_doc_free             (<link linkend="GsfXMLInDoc">GsfXMLInDoc</link> *doc);</programlisting>
<para>
Free up resources</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>doc</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GsfXMLBlob"/>GsfXMLBlob</title>
<indexterm><primary>GsfXMLBlob</primary></indexterm><programlisting>typedef struct _GsfXMLBlob GsfXMLBlob;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GsfXMLOut-struct"/>GsfXMLOut</title>
<indexterm><primary>GsfXMLOut</primary></indexterm><programlisting>typedef struct _GsfXMLOut GsfXMLOut;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GsfXMLInDoc"/>GsfXMLInDoc</title>
<indexterm><primary>GsfXMLInDoc</primary></indexterm><programlisting>typedef struct _GsfXMLInDoc GsfXMLInDoc;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GsfXMLInNS"/>GsfXMLInNS</title>
<indexterm><primary>GsfXMLInNS</primary></indexterm><programlisting>typedef struct {
	char const *uri;
	unsigned    ns_id;
} GsfXMLInNS;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GSF-XML-IN-NODE-FULL:CAPS"/>GSF_XML_IN_NODE_FULL()</title>
<indexterm><primary>GSF_XML_IN_NODE_FULL</primary></indexterm><programlisting>#define     GSF_XML_IN_NODE_FULL(parent_id, id, ns, name, has_content, 	\
			     deprecated_unused_allow_unknown, check_ns, start, end, user)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>parent_id</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ns</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>has_content</parameter>&nbsp;:</term>
<listitem><simpara>
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown:
@\
			     deprecated_unused_allow_unknown: 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>check_ns</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>start</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>end</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GSF-XML-IN-NODE:CAPS"/>GSF_XML_IN_NODE()</title>
<indexterm><primary>GSF_XML_IN_NODE</primary></indexterm><programlisting>#define     GSF_XML_IN_NODE(parent_id, id, ns, name, has_content, start, end)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>parent_id</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ns</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>has_content</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>start</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>end</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GsfXMLInNode"/>GsfXMLInNode</title>
<indexterm><primary>GsfXMLInNode</primary></indexterm><programlisting>typedef struct {
	char const *id;
	int	    ns_id;
	char const *name;
	char const *parent_id;
	gboolean parent_initialized;
	GSList *groups;

	unsigned	has_content;
	gboolean	deprecated_unused_allow_unknown; /* remains here for binary compat */
	gboolean	check_children_for_ns;

	void (*start) (GsfXMLIn *state, xmlChar const **attrs);
	void (*end)   (GsfXMLIn *state, GsfXMLBlob *unknown);

	union {
		int	    v_int;
		gboolean    v_bool;
		gpointer    v_blob;
		char const *v_str;
	} user_data;
} GsfXMLInNode;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GsfXMLInUnknownFunc"/>GsfXMLInUnknownFunc ()</title>
<indexterm><primary>GsfXMLInUnknownFunc</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    (*GsfXMLInUnknownFunc)          (<link linkend="GsfXMLIn">GsfXMLIn</link> *state,
                                             <link linkend="xmlChar">xmlChar</link> const *elem,
                                             <link linkend="xmlChar">xmlChar</link> const **attrs);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>state</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>elem</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>attrs</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-xml-parser-context"/>gsf_xml_parser_context ()</title>
<indexterm><primary>gsf_xml_parser_context</primary></indexterm><programlisting><link linkend="xmlParserCtxt">xmlParserCtxt</link>* gsf_xml_parser_context       (<link linkend="GsfInput">GsfInput</link> *input);</programlisting>
<para>
Create a libxml2 pull style parser context wrapper around a gsf input.
This signature will probably change to supply a SAX structure.
</para>
<para>
NOTE : adds a reference to <parameter>input</parameter>
NOTE : a simple wrapper around a cleaner implementation that will fold in
 when we add other api changes.  Its not worth bumping just for this</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>input</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>: A parser context or NULL
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-xml-in-doc-new"/>gsf_xml_in_doc_new ()</title>
<indexterm><primary>gsf_xml_in_doc_new</primary></indexterm><programlisting><link linkend="GsfXMLInDoc">GsfXMLInDoc</link>* gsf_xml_in_doc_new             (<link linkend="GsfXMLInNode">GsfXMLInNode</link> *root,
                                             <link linkend="GsfXMLInNS">GsfXMLInNS</link> *ns);</programlisting>
<para>
Put the nodes in the NULL terminated array starting at <parameter>root</parameter> and the name
spaces in the NULL terminated array starting at <parameter>ns</parameter> together.  Link them up
and prepare the static data structures necessary to validate a doument based
on that description.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>root</parameter>&nbsp;:</term>
<listitem><simpara> an array of node descriptors
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ns</parameter>&nbsp;:</term>
<listitem><simpara> an array of namespace identifiers
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>NULL on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-xml-in-namecmp"/>gsf_xml_in_namecmp ()</title>
<indexterm><primary>gsf_xml_in_namecmp</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    gsf_xml_in_namecmp              (<link linkend="GsfXMLIn">GsfXMLIn</link> const *state,
                                             <link linkend="char">char</link> const *str,
                                             unsigned <link linkend="int">int</link> ns_id,
                                             <link linkend="char">char</link> const *name);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>state</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GsfXMLIn"><type>GsfXMLIn</type></link> we are reading from.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>str</parameter>&nbsp;:</term>
<listitem><simpara> The potentially namespace qualified node name.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ns_id</parameter>&nbsp;:</term>
<listitem><simpara> The name space id to check
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> The target node name
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>TRUE if <parameter>str</parameter> == <parameter>ns_id</parameter>:<parameter>name</parameter> according to <parameter>state</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-xml-in-parse"/>gsf_xml_in_parse ()</title>
<indexterm><primary>gsf_xml_in_parse</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    gsf_xml_in_parse                (<link linkend="GsfXMLIn">GsfXMLIn</link> *state,
                                             <link linkend="GsfInput">GsfInput</link> *input);</programlisting>
<para>
Read an xml document from <parameter>input</parameter> and parse based on the the descriptor in
<parameter>state</parameter>::doc</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>state</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>input</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>FALSE on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-xml-in-check-ns"/>gsf_xml_in_check_ns ()</title>
<indexterm><primary>gsf_xml_in_check_ns</primary></indexterm><programlisting><link linkend="char">char</link>const * gsf_xml_in_check_ns             (<link linkend="GsfXMLIn">GsfXMLIn</link> const *state,
                                             <link linkend="char">char</link> const *str,
                                             unsigned <link linkend="int">int</link> ns_id);</programlisting>
<para>
According to <parameter>state</parameter> is <parameter>str</parameter> in the namespace <parameter>ns_id</parameter> ?</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>state</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>str</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ns_id</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>a pointer to <parameter>str</parameter> after the namespace if successful,
otherwise NULL.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-xml-in-doc-extend"/>gsf_xml_in_doc_extend ()</title>
<indexterm><primary>gsf_xml_in_doc_extend</primary></indexterm><programlisting><link linkend="void">void</link>        gsf_xml_in_doc_extend           (<link linkend="GsfXMLInDoc">GsfXMLInDoc</link> *doc,
                                             <link linkend="GsfXMLInNode">GsfXMLInNode</link> *nodes);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>doc</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>nodes</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-xml-in-doc-set-unknown-handler"/>gsf_xml_in_doc_set_unknown_handler ()</title>
<indexterm><primary>gsf_xml_in_doc_set_unknown_handler</primary></indexterm><programlisting><link linkend="void">void</link>        gsf_xml_in_doc_set_unknown_handler
                                            (<link linkend="GsfXMLInDoc">GsfXMLInDoc</link> *doc,
                                             <link linkend="GsfXMLInUnknownFunc">GsfXMLInUnknownFunc</link> handler);</programlisting>
<para>
Call the function <parameter>handler</parameter> when an unexpected child node is found</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>doc</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="GsfXMLInDoc"><type>GsfXMLInDoc</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handler</parameter>&nbsp;:</term>
<listitem><simpara> The function to call
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-xml-out-new"/>gsf_xml_out_new ()</title>
<indexterm><primary>gsf_xml_out_new</primary></indexterm><programlisting><link linkend="GsfXMLOut">GsfXMLOut</link>*  gsf_xml_out_new                 (<link linkend="GsfOutput">GsfOutput</link> *output);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>output</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-xml-out-set-doc-type"/>gsf_xml_out_set_doc_type ()</title>
<indexterm><primary>gsf_xml_out_set_doc_type</primary></indexterm><programlisting><link linkend="void">void</link>        gsf_xml_out_set_doc_type        (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml,
                                             <link linkend="char">char</link> const *type);</programlisting>
<para>
Store some optional some &lt;!DOCTYPE .. &gt; content</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>xml</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="GsfXMLOut"><type>GsfXMLOut</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-xml-out-start-element"/>gsf_xml_out_start_element ()</title>
<indexterm><primary>gsf_xml_out_start_element</primary></indexterm><programlisting><link linkend="void">void</link>        gsf_xml_out_start_element       (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml,
                                             <link linkend="char">char</link> const *id);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>xml</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-xml-out-end-element"/>gsf_xml_out_end_element ()</title>
<indexterm><primary>gsf_xml_out_end_element</primary></indexterm><programlisting><link linkend="char">char</link>const * gsf_xml_out_end_element         (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>xml</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-xml-out-add-cstr"/>gsf_xml_out_add_cstr ()</title>
<indexterm><primary>gsf_xml_out_add_cstr</primary></indexterm><programlisting><link linkend="void">void</link>        gsf_xml_out_add_cstr            (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml,
                                             <link linkend="char">char</link> const *id,
                                             <link linkend="char">char</link> const *val_utf8);</programlisting>
<para>
dump <parameter>val_utf8</parameter> to an attribute named <parameter>id</parameter> or as the nodes content escaping
characters as necessary.  If <parameter>val_utf8</parameter> is NULL do nothing (no warning, no
output)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>xml</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara> optionally NULL for content
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>val_utf8</parameter>&nbsp;:</term>
<listitem><simpara> a utf8 encoded string
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-xml-out-add-cstr-unchecked"/>gsf_xml_out_add_cstr_unchecked ()</title>
<indexterm><primary>gsf_xml_out_add_cstr_unchecked</primary></indexterm><programlisting><link linkend="void">void</link>        gsf_xml_out_add_cstr_unchecked  (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml,
                                             <link linkend="char">char</link> const *id,
                                             <link linkend="char">char</link> const *val_utf8);</programlisting>
<para>
dump <parameter>val_utf8</parameter> to an attribute named <parameter>id</parameter> without checking to see if the
content needs escaping.  A useful performance enhancement when the
application knows that structure of the content well.  If <parameter>val_utf8</parameter> is NULL
do nothing (no warning, no output)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>xml</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara> optionally NULL for content
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>val_utf8</parameter>&nbsp;:</term>
<listitem><simpara> a utf8 encoded string to export
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-xml-out-add-bool"/>gsf_xml_out_add_bool ()</title>
<indexterm><primary>gsf_xml_out_add_bool</primary></indexterm><programlisting><link linkend="void">void</link>        gsf_xml_out_add_bool            (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml,
                                             <link linkend="char">char</link> const *id,
                                             <link linkend="gboolean">gboolean</link> val);</programlisting>
<para>
dump boolean value <parameter>val</parameter> to an attribute named <parameter>id</parameter> or as the nodes content
Use '1' or '0' to simplify import</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>xml</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara> optionally NULL for content
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>val</parameter>&nbsp;:</term>
<listitem><simpara> a boolean
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-xml-out-add-int"/>gsf_xml_out_add_int ()</title>
<indexterm><primary>gsf_xml_out_add_int</primary></indexterm><programlisting><link linkend="void">void</link>        gsf_xml_out_add_int             (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml,
                                             <link linkend="char">char</link> const *id,
                                             <link linkend="int">int</link> val);</programlisting>
<para>
dump integer value <parameter>val</parameter> to an attribute named <parameter>id</parameter> or as the nodes content</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>xml</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara> optionally NULL for content
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>val</parameter>&nbsp;:</term>
<listitem><simpara> the value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-xml-out-add-uint"/>gsf_xml_out_add_uint ()</title>
<indexterm><primary>gsf_xml_out_add_uint</primary></indexterm><programlisting><link linkend="void">void</link>        gsf_xml_out_add_uint            (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml,
                                             <link linkend="char">char</link> const *id,
                                             unsigned <link linkend="int">int</link> val);</programlisting>
<para>
dump unsigned integer value <parameter>val</parameter> to an attribute named <parameter>id</parameter> or as the nodes
content</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>xml</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara> optionally NULL for content
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>val</parameter>&nbsp;:</term>
<listitem><simpara> the value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-xml-out-add-float"/>gsf_xml_out_add_float ()</title>
<indexterm><primary>gsf_xml_out_add_float</primary></indexterm><programlisting><link linkend="void">void</link>        gsf_xml_out_add_float           (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml,
                                             <link linkend="char">char</link> const *id,
                                             <link linkend="double">double</link> val,
                                             <link linkend="int">int</link> precision);</programlisting>
<para>
dump float value <parameter>val</parameter> to an attribute named <parameter>id</parameter> or as the nodes
content with precision <parameter>precision</parameter>.  The number will be formattted
according to the "C" locale.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>xml</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara> optionally NULL for content
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>val</parameter>&nbsp;:</term>
<listitem><simpara> the value
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>precision</parameter>&nbsp;:</term>
<listitem><simpara> the number of significant digits to use, -1 meaning "enough".
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-xml-out-add-enum"/>gsf_xml_out_add_enum ()</title>
<indexterm><primary>gsf_xml_out_add_enum</primary></indexterm><programlisting><link linkend="void">void</link>        gsf_xml_out_add_enum            (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml,
                                             <link linkend="char">char</link> const *id,
                                             <link linkend="GType">GType</link> etype,
                                             <link linkend="gint">gint</link> val);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>xml</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>etype</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>val</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-xml-out-add-color"/>gsf_xml_out_add_color ()</title>
<indexterm><primary>gsf_xml_out_add_color</primary></indexterm><programlisting><link linkend="void">void</link>        gsf_xml_out_add_color           (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml,
                                             <link linkend="char">char</link> const *id,
                                             unsigned <link linkend="int">int</link> r,
                                             unsigned <link linkend="int">int</link> g,
                                             unsigned <link linkend="int">int</link> b);</programlisting>
<para>
dump Color <parameter>r</parameter>.<parameter>g</parameter>.<parameter>b</parameter> to an attribute named <parameter>id</parameter> or as the nodes content</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>xml</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara> optionally NULL for content
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>g</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>b</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-xml-out-add-base64"/>gsf_xml_out_add_base64 ()</title>
<indexterm><primary>gsf_xml_out_add_base64</primary></indexterm><programlisting><link linkend="void">void</link>        gsf_xml_out_add_base64          (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml,
                                             <link linkend="char">char</link> const *id,
                                             <link linkend="guint8">guint8</link> const *data,
                                             unsigned <link linkend="int">int</link> len);</programlisting>
<para>
dump <parameter>len</parameter> bytes in <parameter>data</parameter> into the content of node <parameter>id</parameter> using base64</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>xml</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara> optionally NULL for content
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-xml-out-simple-element"/>gsf_xml_out_simple_element ()</title>
<indexterm><primary>gsf_xml_out_simple_element</primary></indexterm><programlisting><link linkend="void">void</link>        gsf_xml_out_simple_element      (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml,
                                             <link linkend="char">char</link> const *id,
                                             <link linkend="char">char</link> const *content);</programlisting>
<para>
A convenience routine</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>xml</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>content</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-xml-out-simple-float-element"/>gsf_xml_out_simple_float_element ()</title>
<indexterm><primary>gsf_xml_out_simple_float_element</primary></indexterm><programlisting><link linkend="void">void</link>        gsf_xml_out_simple_float_element
                                            (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml,
                                             <link linkend="char">char</link> const *id,
                                             <link linkend="double">double</link> val,
                                             <link linkend="int">int</link> precision);</programlisting>
<para>
A convenience routine</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>xml</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>val</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>precision</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gsf-xml-out-simple-int-element"/>gsf_xml_out_simple_int_element ()</title>
<indexterm><primary>gsf_xml_out_simple_int_element</primary></indexterm><programlisting><link linkend="void">void</link>        gsf_xml_out_simple_int_element  (<link linkend="GsfXMLOut">GsfXMLOut</link> *xml,
                                             <link linkend="char">char</link> const *id,
                                             <link linkend="int">int</link> val);</programlisting>
<para>
A convenience routine</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>xml</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>val</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
